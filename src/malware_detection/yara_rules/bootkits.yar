/*
    YARA Rules for detecting bootkit malware
    These rules focus on identifying known bootkit patterns and behaviors
*/

rule Bootkit_MBR_Modification {
    meta:
        description = "Detects code that attempts to modify the Master Boot Record"
        author = "Security Team"
        severity = "high"
        reference = "Internal research"
        date = "2023-07-15"
    
    strings:
        $mbr_write1 = {33 C0 8E D0 BC 00 7C FB 50}  // Common MBR writing pattern
        $mbr_write2 = {B4 02 B0 01 B5 00 B6 00 B1 01 8B 0E}  // INT 13h disk write
        $mbr_func1 = "WriteFile" ascii wide nocase
        $mbr_func2 = "CreateFile" ascii wide nocase
        $device1 = "\\\\.\\PhysicalDrive0" ascii wide nocase
        $device2 = "\\\\.\\PHYSICALDRIVE" ascii wide nocase
        $comment1 = "master boot record" ascii wide nocase
        $comment2 = "mbr" ascii wide nocase
    
    condition:
        uint16(0) == 0x5A4D and  // MZ header
        (
            (any of ($mbr_write*)) or
            (any of ($mbr_func*) and any of ($device*)) or
            (any of ($device*) and any of ($comment*))
        )
}

rule Bootkit_VBR_Targeting {
    meta:
        description = "Detects code that specifically targets the Volume Boot Record"
        author = "Security Team"
        severity = "high"
        reference = "Internal research"
        date = "2023-07-16"
    
    strings:
        $vbr_pattern1 = {EB ?? 90 4D 53 44 4F 53 35 2E 30}  // VBR signature
        $vbr_pattern2 = {EB ?? 90 4E 54 46 53 20 20 20 20}  // NTFS signature
        $vbr_func1 = "DeviceIoControl" ascii wide nocase
        $comment1 = "volume boot record" ascii wide nocase
        $comment2 = "vbr" ascii wide nocase
        $ioctl1 = {72 C2 01 00}  // IOCTL_DISK_GET_DRIVE_LAYOUT
        $ioctl2 = {70 C2 01 00}  // IOCTL_DISK_GET_PARTITION_INFO
    
    condition:
        uint16(0) == 0x5A4D and
        (
            any of ($vbr_pattern*) or
            ($vbr_func1 and any of ($ioctl*)) or
            (any of ($comment*) and any of ($ioctl*))
        )
}

rule Bootkit_UEFI_Tampering {
    meta:
        description = "Detects attempts to tamper with UEFI firmware"
        author = "Security Team"
        severity = "critical"
        reference = "Internal research"
        date = "2023-07-17"
    
    strings:
        $uefi_guid1 = "8BE4DF61-93CA-11D2-AA0D-00E098032B8C" ascii wide nocase  // EFI_GLOBAL_VARIABLE
        $uefi_guid2 = "4D1ED05-38C7-4A6A-9CC6-4BCCA8B38C14" ascii wide nocase   // UEFI variable
        $uefi_var1 = "BootOrder" ascii wide nocase
        $uefi_var2 = "Boot0000" ascii wide nocase
        $uefi_func1 = "GetFirmwareEnvironmentVariable" ascii wide
        $uefi_func2 = "SetFirmwareEnvironmentVariable" ascii wide
        $uefi_func3 = "GetFirmwareEnvironmentVariableEx" ascii wide
        $uefi_func4 = "SetFirmwareEnvironmentVariableEx" ascii wide
        $uefi_api1 = "NtEnumerateSystemEnvironmentValuesEx" ascii wide
        $uefi_api2 = "SystemEnvironmentValuesInformation" ascii wide
    
    condition:
        uint16(0) == 0x5A4D and
        (
            any of ($uefi_guid*) or
            any of ($uefi_var*) or
            any of ($uefi_func*) or
            any of ($uefi_api*)
        )
}

rule Bootkit_PCI_ROM_Modification {
    meta:
        description = "Detects code attempting to modify PCI expansion ROM"
        author = "Security Team"
        severity = "high"
        reference = "Internal research"
        date = "2023-07-18"
    
    strings:
        $pci_rom1 = {55 AA}  // PCI ROM signature
        $pci_func1 = "EnumDeviceDrivers" ascii wide
        $pci_func2 = "DeviceIoControl" ascii wide
        $pci_comment1 = "PCI ROM" ascii wide nocase
        $pci_comment2 = "expansion ROM" ascii wide nocase
        $pci_ioctl = {38 C0 02 00}  // IOCTL_STORAGE_QUERY_PROPERTY
    
    condition:
        uint16(0) == 0x5A4D and
        (
            $pci_rom1 or
            (any of ($pci_func*) and $pci_ioctl) or
            any of ($pci_comment*)
        )
}

rule Bootkit_Known_Family {
    meta:
        description = "Detects known bootkit malware families by name references"
        author = "Security Team"
        severity = "critical"
        reference = "Internal research"
        date = "2023-07-19"
    
    strings:
        $bootkit1 = "TDL" ascii wide nocase
        $bootkit2 = "Alureon" ascii wide nocase
        $bootkit3 = "Olmasco" ascii wide nocase
        $bootkit4 = "Rovnix" ascii wide nocase
        $bootkit5 = "Pihar" ascii wide nocase
        $bootkit6 = "Whistler" ascii wide nocase
        $bootkit7 = "Gapz" ascii wide nocase
        $bootkit8 = "Mebromi" ascii wide nocase
        $bootkit9 = "Trojan.Bootkit" ascii wide nocase
        $bootkit10 = "FinFisher" ascii wide nocase
    
    condition:
        uint16(0) == 0x5A4D and
        any of ($bootkit*)
} 