/*
 * PE Malware Detection Rules
 * These rules focus on detecting malicious Windows executables
 */

rule Suspicious_PE_Sections {
    meta:
        description = "Detects PE files with suspicious section names"
        author = "Security Team"
        severity = "medium"
        date = "2023-10-15"
    
    strings:
        $unc1 = ".text" nocase
        $unc2 = ".data" nocase
        $unc3 = ".rdata" nocase
        $unc4 = ".rsrc" nocase
        $sus1 = ".stub" nocase
        $sus2 = "UPX" nocase
        $sus3 = ".packed" nocase
        $sus4 = ".aspack" nocase
        $sus5 = ".nsp" nocase
        $sus6 = ".enigma" nocase
        $sus7 = ".neolit" nocase
        $mal1 = "krypton" nocase
        $mal2 = "1dT4" nocase
        $mal3 = "h1d3" nocase
        $mal4 = "1njct" nocase
        $mal5 = "exefog" nocase

    condition:
        uint16(0) == 0x5A4D and // MZ header
        (
            (not any of ($unc*)) or 
            (any of ($mal*)) or 
            (2 of ($sus*))
        )
}

rule PE_High_Entropy_Sections {
    meta:
        description = "Detects PE files with high entropy sections (likely packed or encrypted)"
        author = "Security Team"
        severity = "medium"
        reference = "Used with entropy analysis tool"
        date = "2023-10-15"
    
    condition:
        uint16(0) == 0x5A4D and // MZ header
        pe.number_of_sections > 3 and
        // This is a placeholder - requires entropy calculation module
        // Actual implementation would call an external function/module to
        // calculate section entropy and check for sections with entropy > 7.8
        // Will be implemented in the detection code, not in the YARA rule itself
        for any i in (0..pe.number_of_sections - 1): (
            pe.sections[i].name != ".text" and
            pe.sections[i].name != ".data" and
            pe.sections[i].name != ".rdata" and
            pe.sections[i].name != ".rsrc" and
            pe.sections[i].raw_data_size > 4096
        )
}

rule Suspicious_Imports {
    meta:
        description = "Detects PE files with suspicious API imports"
        author = "Security Team"
        severity = "medium"
        date = "2023-10-15"
    
    condition:
        uint16(0) == 0x5A4D and // MZ header
        (
            pe.imports("kernel32.dll", "CreateRemoteThread") or
            pe.imports("kernel32.dll", "VirtualAllocEx") or
            pe.imports("kernel32.dll", "WriteProcessMemory") or
            pe.imports("kernel32.dll", "OpenProcess") or
            pe.imports("ntdll.dll", "NtUnmapViewOfSection") or
            pe.imports("user32.dll", "FindWindow") or
            pe.imports("wininet.dll", "InternetOpen") or
            pe.imports("wininet.dll", "InternetConnect") or
            pe.imports("advapi32.dll", "CreateService") or
            pe.imports("advapi32.dll", "StartService")
        ) and (
            pe.imports("kernel32.dll", "OpenProcess") or
            pe.imports("kernel32.dll", "GetProcAddress") or
            pe.imports("kernel32.dll", "LoadLibrary")
        )
}

rule Keylogger_Capabilities {
    meta:
        description = "Detects PE files with potential keylogging capabilities"
        author = "Security Team"
        severity = "high"
        date = "2023-10-15"
    
    condition:
        uint16(0) == 0x5A4D and // MZ header
        (
            pe.imports("user32.dll", "GetAsyncKeyState") or
            pe.imports("user32.dll", "GetKeyState") or
            pe.imports("user32.dll", "GetKeyboardState") or
            pe.imports("user32.dll", "SetWindowsHookEx") or
            pe.imports("user32.dll", "RegisterHotKey")
        ) and (
            pe.imports("kernel32.dll", "CreateFile") or
            pe.imports("wininet.dll", "InternetOpen") or
            pe.imports("ws2_32.dll", "socket")
        )
}

rule AntiVM_AntiDebug {
    meta:
        description = "Detects PE files with anti-VM or anti-debugging capabilities"
        author = "Security Team"
        severity = "high"
        date = "2023-10-15"
    
    condition:
        uint16(0) == 0x5A4D and // MZ header
        (
            pe.imports("kernel32.dll", "IsDebuggerPresent") or
            pe.imports("kernel32.dll", "CheckRemoteDebuggerPresent") or
            pe.imports("ntdll.dll", "NtQueryInformationProcess") or
            pe.imports("kernel32.dll", "OutputDebugString") or
            pe.imports("kernel32.dll", "GetTickCount") or
            pe.imports("kernel32.dll", "QueryPerformanceCounter")
        ) and (
            pe.imports("kernel32.dll", "CreateFile") or
            pe.imports("kernel32.dll", "DeviceIoControl") or
            pe.imports("kernel32.dll", "GetModuleHandle")
        )
}

rule Potentially_Unwanted_Capabilities {
    meta:
        description = "Detects PE files with potentially unwanted capabilities"
        author = "Security Team"
        severity = "medium"
        date = "2023-10-15"
    
    condition:
        uint16(0) == 0x5A4D and // MZ header
        (
            // Registry manipulation
            pe.imports("advapi32.dll", "RegCreateKey") or
            pe.imports("advapi32.dll", "RegSetValue") or
            
            // Process manipulation
            pe.imports("kernel32.dll", "CreateProcess") or
            pe.imports("kernel32.dll", "TerminateProcess") or
            
            // Auto-start capabilities
            pe.imports("advapi32.dll", "OpenSCManager") or
            
            // Screenshot capabilities
            pe.imports("gdi32.dll", "BitBlt") or
            pe.imports("gdi32.dll", "CreateCompatibleDC") or
            
            // Clipboard monitoring
            pe.imports("user32.dll", "GetClipboardData") or
            pe.imports("user32.dll", "SetClipboardData")
        ) and (
            // Network capabilities
            pe.imports("ws2_32.dll", "connect") or
            pe.imports("wininet.dll", "HttpSendRequest") or
            pe.imports("wininet.dll", "InternetWriteFile") or
            pe.imports("wininet.dll", "InternetReadFile")
        )
} 