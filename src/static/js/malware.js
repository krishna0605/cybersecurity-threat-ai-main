document.addEventListener('DOMContentLoaded', function() {
    const malwareForm = document.getElementById('malware-form');
    const fileInput = document.getElementById('malware-file');
    const resultContainer = document.getElementById('malware-results');
    const progressBar = document.getElementById('malware-progress');
    const alertArea = document.getElementById('malware-alert');
    
    if (malwareForm) {
        malwareForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const file = fileInput.files[0];
            if (!file) {
                showAlert('Please select a file to analyze', 'danger');
                return;
            }
            
            // Check file size (limit to 25MB)
            if (file.size > 25 * 1024 * 1024) {
                showAlert('File size exceeds the 25MB limit', 'danger');
                return;
            }
            
            // Show progress and clear previous results
            progressBar.style.display = 'block';
            resultContainer.innerHTML = '';
            alertArea.innerHTML = '';
            
            const formData = new FormData();
            formData.append('file', file);
            
            fetch('/api/analyze/malware', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                progressBar.style.display = 'none';
                displayResults(data);
            })
            .catch(error => {
                progressBar.style.display = 'none';
                showAlert('Error analyzing file: ' + error.message, 'danger');
            });
        });
    }
    
    function displayResults(data) {
        if (data.error) {
            showAlert('Error: ' + data.error, 'danger');
            return;
        }
        
        let resultHTML = '<div class="card mt-4">';
        resultHTML += '<div class="card-header bg-primary text-white">';
        resultHTML += '<h5 class="mb-0">Malware Analysis Results</h5>';
        resultHTML += '</div>';
        resultHTML += '<div class="card-body">';
        
        // File information
        resultHTML += '<h6>File Information</h6>';
        resultHTML += '<table class="table table-sm">';
        resultHTML += `<tr><td>File Name</td><td>${escapeHtml(data.file_name)}</td></tr>`;
        resultHTML += `<tr><td>File Size</td><td>${formatFileSize(data.file_size)}</td></tr>`;
        resultHTML += `<tr><td>File Type</td><td>${data.file_type || 'Unknown'}</td></tr>`;
        resultHTML += `<tr><td>MD5 Hash</td><td><code>${data.md5}</code></td></tr>`;
        resultHTML += `<tr><td>SHA256 Hash</td><td><code>${data.sha256}</code></td></tr>`;
        resultHTML += `<tr><td>Entropy</td><td>${data.entropy ? data.entropy.toFixed(2) + ' / 8.0' : 'N/A'}</td></tr>`;
        resultHTML += '</table>';
        
        // Threat Assessment
        const threatLevel = data.malicious ? 'danger' : (data.score >= 40 ? 'warning' : 'success');
        const threatText = data.malicious ? 'Malicious' : (data.score >= 40 ? 'Suspicious' : 'Clean');
        
        resultHTML += `<div class="alert alert-${threatLevel} mt-3">`;
        resultHTML += `<h6 class="alert-heading">Threat Assessment: ${threatText}</h6>`;
        resultHTML += `<p>Risk Score: ${data.score}/100</p>`;
        resultHTML += '</div>';
        
        // YARA rule matches
        if (data.yara_matches && data.yara_matches.length > 0) {
            resultHTML += '<h6 class="mt-4">YARA Rule Matches</h6>';
            resultHTML += '<div class="table-responsive">';
            resultHTML += '<table class="table table-sm table-striped">';
            resultHTML += '<thead><tr><th>Rule</th><th>Description</th><th>Severity</th></tr></thead>';
            resultHTML += '<tbody>';
            
            data.yara_matches.forEach(function(match) {
                const severityClass = getSeverityClass(match.severity);
                resultHTML += '<tr>';
                resultHTML += `<td>${escapeHtml(match.rule)}</td>`;
                resultHTML += `<td>${escapeHtml(match.description)}</td>`;
                resultHTML += `<td><span class="badge bg-${severityClass}">${escapeHtml(match.severity)}</span></td>`;
                resultHTML += '</tr>';
            });
            
            resultHTML += '</tbody></table></div>';
        }
        
        // Signatures
        if (data.signatures && data.signatures.length > 0) {
            resultHTML += '<h6 class="mt-4">Malware Signatures</h6>';
            resultHTML += '<ul class="list-group">';
            
            data.signatures.forEach(function(signature) {
                resultHTML += `<li class="list-group-item list-group-item-danger">${escapeHtml(signature)}</li>`;
            });
            
            resultHTML += '</ul>';
        }
        
        // Anomalies
        if (data.anomalies && data.anomalies.length > 0) {
            resultHTML += '<h6 class="mt-4">Detected Anomalies</h6>';
            resultHTML += '<ul class="list-group">';
            
            data.anomalies.forEach(function(anomaly) {
                resultHTML += `<li class="list-group-item list-group-item-warning">${escapeHtml(anomaly)}</li>`;
            });
            
            resultHTML += '</ul>';
        }
        
        // Suspicious strings
        if (data.suspicious_strings && data.suspicious_strings.length > 0) {
            resultHTML += '<h6 class="mt-4">Suspicious Strings</h6>';
            resultHTML += '<div class="alert alert-secondary"><pre class="mb-0"><code>';
            
            data.suspicious_strings.forEach(function(str) {
                resultHTML += escapeHtml(str) + '\n';
            });
            
            resultHTML += '</code></pre></div>';
        }
        
        // Embedded files
        if (data.embedded_files && data.embedded_files.length > 0) {
            resultHTML += '<h6 class="mt-4">Embedded Files</h6>';
            resultHTML += '<ul class="list-group">';
            
            data.embedded_files.forEach(function(file) {
                resultHTML += `<li class="list-group-item">${escapeHtml(file)}</li>`;
            });
            
            resultHTML += '</ul>';
        }
        
        resultHTML += '</div></div>';
        resultContainer.innerHTML = resultHTML;
    }
    
    function showAlert(message, type) {
        alertArea.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
    }
    
    function escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    function getSeverityClass(severity) {
        switch(severity.toLowerCase()) {
            case 'critical': return 'danger';
            case 'high': return 'danger';
            case 'medium': return 'warning';
            case 'low': return 'info';
            default: return 'secondary';
        }
    }
}); 